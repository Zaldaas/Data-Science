# -*- coding: utf-8 -*-
"""Zeid Aldaas Homework 4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14kZ00VuGbKViBD_pCLrNq2O91dhFi2_5
"""

# TASK 1
'''
1. Consider the two tables shown below called population and countyseats.
population:
 state		county       	year 	population
1 California	Orange	2000 	2846289
2 California	Orange	2010 	3010232
3 California	Los Angeles	2000 	3694820
4 California	Los Angeles	2010 	3792621

countyseats:
 statename    	countyname	countyseat
1 California 	Orange      	Santa Ana
2 California 	Los Angeles 	Los Angeles
3 California 	San Diego   	San Diego
4 Oregon     	Wasco       	The Dalles

You should be able to calculate the output by hand though you may use R to check your answer.
'''

!pip install pandas
import pandas as pd
population = pd.DataFrame(
    {
        "state": ["California", "California", "California", "California"],
        "county": ["Orange", "Orange", "Los Angeles", "Los Angeles"],
        "year": [2000, 2010, 2000, 2010],
        "population": [2846289, 3010232, 3694820, 3792621]
    }
)

countyseats = pd.DataFrame(
    {
        "statename": ["California", "California", "California", "Oregon"],
        "countyname": ["Orange", "Los Angeles", "San Diego", "Wasco"],
        "countyseat": ["Santa Ana", "Los Angeles", "San Diego", "The Dalles"]
    }
)

# Draw the output table from the following operations (you should be able to calculate the output by hand though you may use R to check your answers).
# a) pd.merge(population, countyseats) <- ERROR

# b) pd.merge(population, countyseats, left_on="state", right_on="statename")
pd.merge(population, countyseats, left_on="state", right_on="statename")

# c) pd.merge(population, countyseats, left_on=["state", "county"], right_on=["statename", "countyname"])
pd.merge(population, countyseats, left_on=["state", "county"], right_on=["statename", "countyname"])

# d) pd.merge(population, countyseats, left_on=["state", "county", "year"], right_on=["statename", "countyname", "countyseat"]) <- ERROR

# TASK 2
# Consider the billboard dataset that is supplied with the tidyr package which shows the Billboard top 100 song rankings in the year 2000. Apply the Pandas data wrangling methods to answer these questions. For each question, give only the code
import statsmodels.api as sm

billboard_dataset = sm.datasets.get_rdataset("billboard", "tidyr")
billboard = billboard_dataset.data

billboard_melt = billboard.melt(
    id_vars=['artist', 'track', 'date.entered'],
    value_vars=[f'wk{i}' for i in range(1, 77)],
    var_name='week',
    value_name='rank'
).dropna()
billboard_melt

# a) Show for each track, how many weeks it spent on the chart
track_weeks = billboard_melt.groupby('track').size()
track_weeks

# b) List tracks in decreasing order of number of weeks spent on the chart
track_weeks.sort_values(ascending=False)

# c) Show for each track, its top rank
track_top_rank = billboard_melt.groupby('track')['rank'].max()
track_top_rank

# d) List tracks in increasing order of its top rank
track_top_rank.sort_values()

# e) Show for each artist, their top rank
artist_top_rank = billboard_melt.groupby('artist')['rank'].max()
artist_top_rank

# f) List artists in increasing order of their top rank
artist_top_rank.sort_values()

# g) List tracks that spent more than 35 weeks in the charts
track_weeks[track_weeks > 35]

# h) List tracks that spent more than 35 weeks in the charts along with their artists
billboard_melt.groupby(['track', 'artist']).size()[lambda x: x > 35]

# TASK 3
# The demographics.csv  file (available in the Data Wrangling module on Canvas) gives the proportion of a country’s population in different age groups and some other demographic data such as mortality rates and expected lifetime. You can read a CSV file into a DataFrame using Pandas read_csv(), like so: demo = pd.read_csv("demographics.csv")
demo = pd.read_csv("demographics.csv")
demo

# a) The data is not “tidy”. In 2-3 sentences, explain why.
# It uses the "wide" format, where multiple columns (such as those for different demographic indicators) are spread across multiple rows for the same country. Instead of having one observation per row, multiple variables (like age groups or sex-related differences) are represented across different rows. Also, there are repeated rows for the same country based on different demographic series (like life expectancy or population), which makes it difficult to analyze.

# b) Transform the table to tidy data with one country per row.
demo_tidy = demo.pivot(index=['Country Name', 'Country Code'], columns='Series Name', values='YR2015').reset_index()
demo_tidy

# c) Add the male/female population numbers together
demo_tidy['Life expectancy at birth, total (years)'] = pd.to_numeric(demo_tidy['Life expectancy at birth, total (years)'], errors='coerce')
demo_tidy['Urban population'] = pd.to_numeric(demo_tidy['Urban population'], errors='coerce')
demo_tidy['Population, total'] = pd.to_numeric(demo_tidy['Population, total'], errors='coerce')
demo_tidy['Population ages 80 and above, female'] = pd.to_numeric(demo_tidy['Population ages 80 and above, female'], errors='coerce')
demo_tidy['Population ages 80 and above, male'] = pd.to_numeric(demo_tidy['Population ages 80 and above, male'], errors='coerce')
demo_tidy['Population ages 15-64, female'] = pd.to_numeric(demo_tidy['Population ages 15-64, female'], errors='coerce')
demo_tidy['Population ages 15-64, male'] = pd.to_numeric(demo_tidy['Population ages 15-64, male'], errors='coerce')
demo_tidy['Population ages 0-14, female'] = pd.to_numeric(demo_tidy['Population ages 0-14, female'], errors='coerce')
demo_tidy['Population ages 0-14, male'] = pd.to_numeric(demo_tidy['Population ages 0-14, male'], errors='coerce')
demo_tidy['Mortality rate, adult, female (per 1,000 female adults)'] = pd.to_numeric(demo_tidy['Mortality rate, adult, female (per 1,000 female adults)'], errors='coerce')
demo_tidy['Mortality rate, adult, male (per 1,000 male adults)'] = pd.to_numeric(demo_tidy['Mortality rate, adult, male (per 1,000 male adults)'], errors='coerce')
demo_tidy['Population ages 65 and above, female'] = pd.to_numeric(demo_tidy['Population ages 65 and above, female'], errors='coerce')
demo_tidy['Population ages 65 and above, male'] = pd.to_numeric(demo_tidy['Population ages 65 and above, male'], errors='coerce')

demo_tidy['SP.DYN.LE00.IN'] = demo_tidy['Life expectancy at birth, total (years)']
demo_tidy['SP.URB.TOTL'] = demo_tidy['Urban population']
demo_tidy['SP.POP.TOTL'] = demo_tidy['Population, total']
demo_tidy['SP.POP.80UP.IN'] = demo_tidy['Population ages 80 and above, female'] + demo_tidy['Population ages 80 and above, male']
demo_tidy['SP.POP.1564.IN'] = demo_tidy['Population ages 15-64, female'] + demo_tidy['Population ages 15-64, male']
demo_tidy['SP.POP.0014.IN'] = demo_tidy['Population ages 0-14, female'] + demo_tidy['Population ages 0-14, male']
demo_tidy['SP.DYN.AMRT'] = demo_tidy['Mortality rate, adult, female (per 1,000 female adults)'] + demo_tidy['Mortality rate, adult, male (per 1,000 male adults)']
demo_tidy['SP.POP.TOTL.IN'] = demo_tidy['Population, total']
demo_tidy['SP.POP.65UP.IN'] = demo_tidy['Population ages 65 and above, female'] + demo_tidy['Population ages 65 and above, male']

demo_final = demo_tidy.drop(columns=[
    ''
    'Life expectancy at birth, total (years)', 'Urban population',
    'Population, total',
    'Mortality rate, adult, female (per 1,000 female adults)', 'Mortality rate, adult, male (per 1,000 male adults)',
    'Population ages 0-14, female', 'Population ages 0-14, male',
    'Population ages 15-64, female', 'Population ages 15-64, male',
    'Population ages 65 and above, female', 'Population ages 65 and above, male',
    'Population ages 80 and above, female', 'Population ages 80 and above, male',
    'Population, female', 'Population, male',
    'Country Name',
])

demo_final

# d) Write code to show the top 5 countries with the lowest proportion of the population below 14 years old (i.e., SP.POP.0014.IN/SP.POP.TOTL) [Code, and list of 5 countries]
demo_final['SP.POP.0014.IN'] = pd.to_numeric(demo_final['SP.POP.0014.IN'], errors='coerce')
demo_final['SP.POP.TOTL'] = pd.to_numeric(demo_final['SP.POP.TOTL'], errors='coerce')

demo_final['SP.POP.0014.IN/SP.POP.TOTL'] = demo_final['SP.POP.0014.IN'] / demo_final['SP.POP.TOTL']

demo_final.sort_values(by='SP.POP.0014.IN/SP.POP.TOTL', ascending=True).head(5)

# Commented out IPython magic to ensure Python compatibility.
def colab2pdf():
  # @title Download Notebook in PDF Format{display-mode:'form'}
  !apt-get install -yqq --no-install-recommends librsvg2-bin>/dev/null;
  import contextlib,datetime,google,io,IPython,ipywidgets,json,locale,nbformat,os,pathlib,requests,urllib,warnings,werkzeug,yaml,re;locale.setlocale(locale.LC_ALL,'en_US.UTF-8');warnings.filterwarnings('ignore',category=nbformat.validator.MissingIDFieldWarning);
#   %matplotlib inline
  def convert(b):
    try:
      s.value='🔄 Converting';b.disabled=True
      n=pathlib.Path(werkzeug.utils.secure_filename(urllib.parse.unquote(requests.get(f'http://{os.environ["COLAB_JUPYTER_IP"]}:{os.environ["KMP_TARGET_PORT"]}/api/sessions').json()[0]['name'])))
      p=pathlib.Path('/content/pdfs')/f'{datetime.datetime.utcnow().strftime("%Y%m%d_%H%M%S")}_{n.stem}';p.mkdir(parents=True,exist_ok=True);nb=nbformat.reads(json.dumps(google.colab._message.blocking_request('get_ipynb',timeout_sec=600)['ipynb']),as_version=4)
      u=[u for c in nb.cells if c.get('cell_type')=='markdown' for u in re.findall(r'!\[.*?\]\((https?://.*?)\)',c['source']) if requests.head(u,timeout=5).status_code!=200]
      if u:raise Exception(f"Bad Image URLs: {','.join(u)}")
      nb.cells=[cell for cell in nb.cells if '--Colab2PDF' not in cell.source]
      nb=nbformat.v4.new_notebook(cells=nb.cells or [nbformat.v4.new_code_cell('#')]);nbformat.validator.normalize(nb)
      nbformat.write(nb,(p/f'{n.stem}.ipynb').open('w',encoding='utf-8'))
      with (p/'config.yml').open('w', encoding='utf-8') as f: yaml.dump({'include-in-header':[{'text':r'\usepackage{fvextra}\DefineVerbatimEnvironment{Highlighting}{Verbatim}{breaksymbolleft={},showspaces=false,showtabs=false,breaklines,breakanywhere,commandchars=\\\{\}}'}],'include-before-body':[{'text':r'\DefineVerbatimEnvironment{verbatim}{Verbatim}{breaksymbolleft={},showspaces=false,showtabs=false,breaklines}'}]},f)
      !quarto render {p}/{n.stem}.ipynb --metadata-file={p}/config.yml --to pdf -M latex-auto-install -M margin-top=1in -M margin-bottom=1in -M margin-left=1in -M margin-right=1in --quiet
      google.colab.files.download(str(p/f'{n.stem}.pdf'));s.value=f'✅ Downloaded: {n.stem}.pdf'
    except Exception as e:s.value=f'❌ {str(e)}'
    finally:b.disabled=False
  if not pathlib.Path('/usr/local/bin/quarto').exists():
    !wget -q 'https://quarto.org/download/latest/quarto-linux-amd64.deb' && dpkg -i quarto-linux-amd64.deb>/dev/null && quarto install tinytex --update-path --quiet && rm quarto-linux-amd64.deb
  b=ipywidgets.widgets.Button(description='⬇️ Download');s=ipywidgets.widgets.Label();b.on_click(lambda b:convert(b));IPython.display.display(ipywidgets.widgets.HBox([b,s]))
colab2pdf() # | Colab2PDF v1.6 | https://github.com/drengskapur/colab2pdf | GPL-3.0-or-later |