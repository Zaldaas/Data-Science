# -*- coding: utf-8 -*-
"""Zeid Aldaas Homework 2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Y-O-Enyo4DKGsYb3g5-re8U5RRoByjW-
"""

# 1. The following questions use the data collected from the anonymous survey collected at the beginning of the course and from previous semesters. The dataset can be downloaded from the Datasets module on Canvas. Perform the following steps.
# a. Load the survey data into a variable called ‚Äúsurvey"
!pip install pandas
import pandas as pd
survey = pd.read_csv("https://drive.google.com/uc?export=download&id=1eqckt-gt5XIOW2OATNIVoJcVuYFOwdMz")
survey

# b. How many rows are there in the data? (code, answer)
print("Number of rows in the data:", len(survey))

# c. Are there any NAs in the dataset?
print("Number of NAs in the dataset:")
print(survey.isna().sum())

# d. How many rows have at least one NA?
print("Number of rows with at least one NA:")
print(survey.isna().any(axis=1).sum())

# e. Write Python code to remove all rows which contain an NA value. Give your Python code. How many rows does your data contain?
survey = survey.dropna()
print("Number of rows after removing rows with NA values:", len(survey))

# 2. Use the same data from the previous question (after removing NAs) to generate the following graphs. All plots should use Lets-Plot. Include both the Python code and the plot itself.
!pip install lets-plot
from lets_plot import *
LetsPlot.setup_html()

# This goes after the call to LetsPlot.setup_html(),
# but before calling ggplot().

def setup_colab2pdf():
  def _repr_svg_(self):
    from io import BytesIO
    from sys import stdout
    file_like = BytesIO()
    self.to_svg(file_like)
    return file_like.getvalue().decode(stdout.encoding)
  import lets_plot
  lets_plot.plot.core.PlotSpec._repr_svg_ = _repr_svg_

setup_colab2pdf()

# a. Plot a histogram of variable Math
ggplot(survey, aes(x="Math")) + geom_histogram()

# b. The plot above likely has x-axis ‚Äúbreaks‚Äù not aligned with the bars. Provide your own breaks to match the bars.
ggplot(survey, aes(x="Math")) + geom_histogram() + scale_x_continuous(breaks=[.95, 1.9, 3.15, 4.075, 5.025, 5.975, 6.925, 7.85, 9.10, 10.05])

# c. Plot a boxplot of variable Math
ggplot(survey, aes(x="Math")) + geom_boxplot()

# d. Plot a scatterplot of variables Math and Statistics.
ggplot(survey, aes(x="Math", y="Statistics")) + geom_point()

# e. Redraw the previous scatterplot but also:
# i. Add more descriptive x and y-axis labels, add a title that should be the names of all group members, set both x-axis and y-axis limits to (1,10), and make sure x-axis and y-axis breaks are aligned with the points.
ggplot(survey, aes(x="Math", y="Statistics")) + geom_point() + labs(x="Math", y="Statistics", title="Math vs. Statistics") + scale_x_continuous(breaks=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

# f. Plot a boxplot of variable ComputerScience vs. Semester
ggplot(survey, aes(x="Semester", y="ComputerScience")) + geom_boxplot()

# g. Visualize the two categorical variables TakenCPSC483 and PlanCPSC483
ggplot(survey, aes(x="TakenCPSC483", fill="PlanCPSC483")) + geom_bar()

# Commented out IPython magic to ensure Python compatibility.
def colab2pdf():
  # @title Download Notebook in PDF Format{display-mode:'form'}
  !apt-get install -yqq --no-install-recommends librsvg2-bin>/dev/null;
  import contextlib,datetime,google,io,IPython,ipywidgets,json,locale,nbformat,os,pathlib,requests,urllib,warnings,werkzeug,yaml,re;locale.setlocale(locale.LC_ALL,'en_US.UTF-8');warnings.filterwarnings('ignore',category=nbformat.validator.MissingIDFieldWarning);
#   %matplotlib inline
  def convert(b):
    try:
      s.value='üîÑ Converting';b.disabled=True
      n=pathlib.Path(werkzeug.utils.secure_filename(urllib.parse.unquote(requests.get(f'http://{os.environ["COLAB_JUPYTER_IP"]}:{os.environ["KMP_TARGET_PORT"]}/api/sessions').json()[0]['name'])))
      p=pathlib.Path('/content/pdfs')/f'{datetime.datetime.utcnow().strftime("%Y%m%d_%H%M%S")}_{n.stem}';p.mkdir(parents=True,exist_ok=True);nb=nbformat.reads(json.dumps(google.colab._message.blocking_request('get_ipynb',timeout_sec=600)['ipynb']),as_version=4)
      u=[u for c in nb.cells if c.get('cell_type')=='markdown' for u in re.findall(r'!\[.*?\]\((https?://.*?)\)',c['source']) if requests.head(u,timeout=5).status_code!=200]
      if u:raise Exception(f"Bad Image URLs: {','.join(u)}")
      nb.cells=[cell for cell in nb.cells if '--Colab2PDF' not in cell.source]
      nb=nbformat.v4.new_notebook(cells=nb.cells or [nbformat.v4.new_code_cell('#')]);nbformat.validator.normalize(nb)
      nbformat.write(nb,(p/f'{n.stem}.ipynb').open('w',encoding='utf-8'))
      with (p/'config.yml').open('w', encoding='utf-8') as f: yaml.dump({'include-in-header':[{'text':r'\usepackage{fvextra}\DefineVerbatimEnvironment{Highlighting}{Verbatim}{breaksymbolleft={},showspaces=false,showtabs=false,breaklines,breakanywhere,commandchars=\\\{\}}'}],'include-before-body':[{'text':r'\DefineVerbatimEnvironment{verbatim}{Verbatim}{breaksymbolleft={},showspaces=false,showtabs=false,breaklines}'}]},f)
      !quarto render {p}/{n.stem}.ipynb --metadata-file={p}/config.yml --to pdf -M latex-auto-install -M margin-top=1in -M margin-bottom=1in -M margin-left=1in -M margin-right=1in --quiet
      google.colab.files.download(str(p/f'{n.stem}.pdf'));s.value=f'‚úÖ Downloaded: {n.stem}.pdf'
    except Exception as e:s.value=f'‚ùå {str(e)}'
    finally:b.disabled=False
  if not pathlib.Path('/usr/local/bin/quarto').exists():
    !wget -q 'https://quarto.org/download/latest/quarto-linux-amd64.deb' && dpkg -i quarto-linux-amd64.deb>/dev/null && quarto install tinytex --update-path --quiet && rm quarto-linux-amd64.deb
  b=ipywidgets.widgets.Button(description='‚¨áÔ∏è Download');s=ipywidgets.widgets.Label();b.on_click(lambda b:convert(b));IPython.display.display(ipywidgets.widgets.HBox([b,s]))
colab2pdf() # | Colab2PDF v1.6 | https://github.com/drengskapur/colab2pdf | GPL-3.0-or-later |