# -*- coding: utf-8 -*-
"""Zeid Aldaas Homework 9.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1j0q6JnFG3fXOXVQtNRkyJr8-5DMmscHq
"""

# 1. How does a Distributed File System protect against data loss due to a computer crash? Answer in 2-3 sentences.
print("A Distributed File System replicates data across multiple nodes. If one node crashes, the data can still be accessed from other replicas, protecting against data loss.")

# 2. Consider the problem of counting all length-3 sequences, including overlapping sequences, i.e., the number of occurrences of AGA, GAT, ATA, ‚Ä¶ using the following Map-Reduce program.
def map_fn(chunk):
    for i in range(len(chunk)-2):
        w = chunk[i:i+3]
        yield (w, 1)

def reduce_fn(key, values):
    yield (key, sum(values))


# Below is a string containing a DNA sequence:
dna = "AGATAGA"

# a) What are ALL the key, value pairs output by the Map step?
map_output = list(map_fn(dna))
print("a) What are ALL the key, value pairs output by the Map step?")
for kv in map_output:
    print(kv)

# b) What are ALL the key, value pairs input to the Reduce steps?
from collections import defaultdict
grouped = defaultdict(list)
for k, v in map_output:
    grouped[k].append(v)

print("\nb) What are ALL the key, value pairs input to the Reduce steps?")
for k, vs in grouped.items():
    print(k, vs)

# c) What is the output after the Reduce steps?
reduce_output = []
for k, vs in grouped.items():
    reduce_output.extend(list(reduce_fn(k, vs)))

print("\nc) What is the output after the Reduce steps?")
for kv in reduce_output:
    print(kv)

import pandas as pd
from collections import defaultdict

# 3. Consider the following Map-Reduce program to process a data frame.
def map_fn(chunk):
    inputvalue = chunk.squeeze()
    if inputvalue.arr_delay > 30:
        yield (inputvalue.dest, 1)

def reduce_fn(key, values):
    yield (key, ())

# If the input data frame is:
data = pd.DataFrame({
    "flight": ["UA", "UA", "DL", "DL"],
    "carrier": [345, 452, 428, 567],
    "arr_delay": [20, 38, 4, 42],
    "dest": ["LAX", "MIA", "MIA", "ORD"]
})

# a. How many times will map() be executed?
map_executions = len(data)
print("a. How many times will map() be executed?\n", map_executions)

# b. What are ALL the (key, value) pairs output by the Map functions?
map_output = []
for i in range(len(data)):
    chunk = data.iloc[[i]]
    for kv in map_fn(chunk):
        map_output.append(kv)

print("\nb. What are ALL the (key, value) pairs output by the Map functions?")
for kv in map_output:
    print(kv)

# c. What are ALL the (key, value) pairs input to the Reduce functions?
grouped = defaultdict(list)
for k, v in map_output:
    grouped[k].append(v)

print("\nc. What are ALL the (key, value) pairs input to the Reduce functions?")
for k, vs in grouped.items():
    print(k, vs)

# d. What is the output (keys only) output by the Reduce functions?
reduce_output = []
for k, vs in grouped.items():
    for out in reduce_fn(k, vs):
        reduce_output.append(out)

print("\nd. What is the output (keys only) output by the Reduce functions?")
for kv in reduce_output:
    print(kv)

# e. What does the above map-reduce program do?
print("\ne. What does the above map-reduce program do?\nThis map-reduce program filters rows by arr_delay > 30 and groups them by dest, effectively identifying destinations with delayed flights.")

# Commented out IPython magic to ensure Python compatibility.
def colab2pdf():
  # @title Download Notebook in PDF Format{display-mode:'form'}
  !apt-get install -yqq --no-install-recommends librsvg2-bin>/dev/null;
  import contextlib,datetime,google,io,IPython,ipywidgets,json,locale,nbformat,os,pathlib,requests,urllib,warnings,werkzeug,yaml,re;locale.setlocale(locale.LC_ALL,'en_US.UTF-8');warnings.filterwarnings('ignore',category=nbformat.validator.MissingIDFieldWarning);
#   %matplotlib inline
  def convert(b):
    try:
      s.value='üîÑ Converting';b.disabled=True
      n=pathlib.Path(werkzeug.utils.secure_filename(urllib.parse.unquote(requests.get(f'http://{os.environ["COLAB_JUPYTER_IP"]}:{os.environ["KMP_TARGET_PORT"]}/api/sessions').json()[0]['name'])))
      p=pathlib.Path('/content/pdfs')/f'{datetime.datetime.utcnow().strftime("%Y%m%d_%H%M%S")}_{n.stem}';p.mkdir(parents=True,exist_ok=True);nb=nbformat.reads(json.dumps(google.colab._message.blocking_request('get_ipynb',timeout_sec=600)['ipynb']),as_version=4)
      u=[u for c in nb.cells if c.get('cell_type')=='markdown' for u in re.findall(r'!\[.*?\]\((https?://.*?)\)',c['source']) if requests.head(u,timeout=5).status_code!=200]
      if u:raise Exception(f"Bad Image URLs: {','.join(u)}")
      nb.cells=[cell for cell in nb.cells if '--Colab2PDF' not in cell.source]
      nb=nbformat.v4.new_notebook(cells=nb.cells or [nbformat.v4.new_code_cell('#')]);nbformat.validator.normalize(nb)
      nbformat.write(nb,(p/f'{n.stem}.ipynb').open('w',encoding='utf-8'))
      with (p/'config.yml').open('w', encoding='utf-8') as f: yaml.dump({'include-in-header':[{'text':r'\usepackage{fvextra}\DefineVerbatimEnvironment{Highlighting}{Verbatim}{breaksymbolleft={},showspaces=false,showtabs=false,breaklines,breakanywhere,commandchars=\\\{\}}'}],'include-before-body':[{'text':r'\DefineVerbatimEnvironment{verbatim}{Verbatim}{breaksymbolleft={},showspaces=false,showtabs=false,breaklines}'}]},f)
      !quarto render {p}/{n.stem}.ipynb --metadata-file={p}/config.yml --to pdf -M latex-auto-install -M margin-top=1in -M margin-bottom=1in -M margin-left=1in -M margin-right=1in --quiet
      google.colab.files.download(str(p/f'{n.stem}.pdf'));s.value=f'‚úÖ Downloaded: {n.stem}.pdf'
    except Exception as e:s.value=f'‚ùå {str(e)}'
    finally:b.disabled=False
  if not pathlib.Path('/usr/local/bin/quarto').exists():
    !wget -q 'https://quarto.org/download/latest/quarto-linux-amd64.deb' && dpkg -i quarto-linux-amd64.deb>/dev/null && quarto install tinytex --update-path --quiet && rm quarto-linux-amd64.deb
  b=ipywidgets.widgets.Button(description='‚¨áÔ∏è Download');s=ipywidgets.widgets.Label();b.on_click(lambda b:convert(b));IPython.display.display(ipywidgets.widgets.HBox([b,s]))
colab2pdf() # | Colab2PDF v1.6 | https://github.com/drengskapur/colab2pdf | GPL-3.0-or-later |